# Generated by Django 4.2.19 on 2025-03-08 06:44

import apps.alunos.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Aluno',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('nivel', models.CharField(choices=[('EFI', 'Ensino Fundamental Anos Iniciais'), ('EFF', 'Ensino Fundamental Anos Finais')], help_text='Nível de ensino do aluno', max_length=3, verbose_name='Nível')),
                ('matricula', models.CharField(help_text='Número de matrícula do aluno', max_length=20, unique=True, verbose_name='Matrícula')),
                ('turno', models.CharField(choices=[('M', 'Manhã'), ('T', 'Tarde')], help_text='Turno de estudo do aluno', max_length=1, verbose_name='Turno')),
                ('version', models.IntegerField(default=1, editable=False)),
                ('foto', models.ImageField(blank=True, help_text='Tamanho máximo permitido: 5MB', null=True, upload_to=apps.alunos.models.aluno_foto_path, validators=[apps.alunos.models.validate_image], verbose_name='Foto do Aluno')),
                ('nome', models.CharField(help_text='Digite o nome completo do aluno', max_length=255, validators=[django.core.validators.RegexValidator(message='Nome deve conter apenas letras', regex='^[A-Za-zÀ-ÿ\\s]*$')], verbose_name='Nome Completo')),
                ('data_nascimento', models.DateField(help_text='Data de nascimento do aluno', verbose_name='Data de Nascimento')),
                ('cpf', models.CharField(blank=True, help_text='CPF no formato: 999.999.999-99', max_length=14, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Formato do CPF deve ser: 999.999.999-99', regex='^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$')], verbose_name='CPF')),
                ('email', models.EmailField(blank=True, max_length=255, null=True, verbose_name='E-mail')),
                ('telefone', models.CharField(blank=True, max_length=15, validators=[django.core.validators.RegexValidator(message='Formato do telefone deve ser: (99) 99999-9999', regex='^\\(\\d{2}\\) \\d{4,5}-\\d{4}$')], verbose_name='Telefone')),
                ('endereco', models.CharField(max_length=255, verbose_name='Endereço')),
                ('cidade', models.CharField(max_length=100, verbose_name='Cidade')),
                ('uf', models.CharField(max_length=2, verbose_name='UF')),
                ('ano', models.CharField(choices=[('3', '3º Ano'), ('4', '4º Ano'), ('5', '5º Ano'), ('6', '6º Ano'), ('7', '7º Ano'), ('8', '8º Ano'), ('901', '9º Ano - Turma 901'), ('902', '9º Ano - Turma 902')], max_length=3, verbose_name='Ano')),
                ('turma', models.CharField(max_length=50, verbose_name='Turma')),
                ('data_matricula', models.DateField(verbose_name='Data de Matrícula')),
                ('nome_responsavel1', models.CharField(max_length=255, verbose_name='Nome do Responsável 1')),
                ('telefone_responsavel1', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='Formato do telefone deve ser: (99) 99999-9999', regex='^\\(\\d{2}\\) \\d{4,5}-\\d{4}$')], verbose_name='Telefone do Responsável 1')),
                ('nome_responsavel2', models.CharField(blank=True, max_length=255, null=True, verbose_name='Nome do Responsável 2')),
                ('telefone_responsavel2', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator(message='Formato do telefone deve ser: (99) 99999-9999', regex='^\\(\\d{2}\\) \\d{4,5}-\\d{4}$')], verbose_name='Telefone do Responsável 2')),
                ('rg', models.CharField(blank=True, max_length=20, null=True, verbose_name='RG')),
                ('observacoes', models.TextField(blank=True, null=True, verbose_name='Observações')),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='alunos_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='alunos_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Aluno',
                'verbose_name_plural': 'Alunos',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='Nota',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('disciplina', models.CharField(choices=[('PORT', 'Português'), ('MAT', 'Matemática'), ('CIEN', 'Ciências'), ('HIST', 'História'), ('GEO', 'Geografia'), ('ING', 'Inglês'), ('ART', 'Artes'), ('EDF', 'Educação Física')], max_length=4, verbose_name='Disciplina')),
                ('valor', models.DecimalField(decimal_places=2, max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Nota')),
                ('bimestre', models.IntegerField(choices=[(1, '1º Bimestre'), (2, '2º Bimestre'), (3, '3º Bimestre'), (4, '4º Bimestre')], default=1, verbose_name='Bimestre')),
                ('data', models.DateField(default=django.utils.timezone.now, verbose_name='Data de Lançamento')),
                ('observacao', models.TextField(blank=True, null=True, verbose_name='Observação')),
                ('email', models.EmailField(blank=True, max_length=255, null=True, verbose_name='E-mail')),
                ('telefone', models.CharField(blank=True, max_length=15, validators=[django.core.validators.RegexValidator(message='Formato do telefone deve ser: (99) 99999-9999', regex='^\\(\\d{2}\\) \\d{4,5}-\\d{4}$')], verbose_name='Telefone')),
                ('endereco', models.CharField(blank=True, max_length=255, null=True, verbose_name='Endereço')),
                ('cidade', models.CharField(blank=True, max_length=100, null=True, verbose_name='Cidade')),
                ('uf', models.CharField(blank=True, max_length=2, null=True, verbose_name='UF')),
                ('turma', models.CharField(blank=True, max_length=255, null=True, verbose_name='Turma')),
                ('data_matricula', models.DateField(blank=True, null=True, verbose_name='Data de Matrícula')),
                ('nome_responsavel1', models.CharField(blank=True, max_length=255, null=True, verbose_name='Nome do Responsável 1')),
                ('nome_responsavel2', models.CharField(blank=True, max_length=255, null=True, verbose_name='Nome do Responsável 2')),
                ('telefone_responsavel2', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator(message='Formato do telefone deve ser: (99) 99999-9999', regex='^\\(\\d{2}\\) \\d{4,5}-\\d{4}$')], verbose_name='Telefone do Responsável 2')),
                ('rg', models.CharField(blank=True, max_length=20, null=True, verbose_name='RG')),
                ('observacoes', models.TextField(blank=True, null=True, verbose_name='Observações')),
                ('aluno', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='alunos.aluno', verbose_name='Aluno')),
            ],
            options={
                'verbose_name': 'Nota',
                'verbose_name_plural': 'Notas',
                'ordering': ['aluno', 'disciplina', 'bimestre'],
                'indexes': [models.Index(fields=['aluno', 'disciplina'], name='alunos_nota_aluno_i_c4306c_idx')],
                'unique_together': {('aluno', 'disciplina', 'bimestre')},
            },
        ),
        migrations.AddIndex(
            model_name='aluno',
            index=models.Index(fields=['nome'], name='alunos_alun_nome_6c76a2_idx'),
        ),
        migrations.AddIndex(
            model_name='aluno',
            index=models.Index(fields=['matricula'], name='alunos_alun_matricu_deb3c7_idx'),
        ),
        migrations.AddIndex(
            model_name='aluno',
            index=models.Index(fields=['cpf'], name='alunos_alun_cpf_0c9ca6_idx'),
        ),
        migrations.AddIndex(
            model_name='aluno',
            index=models.Index(fields=['nivel', 'turno'], name='alunos_alun_nivel_023a83_idx'),
        ),
        migrations.AddConstraint(
            model_name='aluno',
            constraint=models.UniqueConstraint(condition=models.Q(('ativo', True)), fields=('cpf',), name='unique_active_cpf'),
        ),
        migrations.AddConstraint(
            model_name='aluno',
            constraint=models.UniqueConstraint(condition=models.Q(('ativo', True)), fields=('matricula',), name='unique_active_matricula'),
        ),
    ]
