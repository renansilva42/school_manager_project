# apps/chatbot/utils.py
import json
import re
from datetime import datetime
from typing import Dict, List, Optional
import openai
from django.conf import settings
from django.db.models import Avg, Max, Min
from apps.alunos.models import Aluno, Nota
from decimal import Decimal
from django.urls import reverse
import logging

# Configurar o logger
logger = logging.getLogger(__name__)

# Verifica a vers√£o do openai para definir a forma correta de uso
try:
    openai_version = openai.__version__
    use_legacy_api = openai_version.startswith("0.")
except AttributeError:
    use_legacy_api = True

def get_openai_response(messages, tools=None, tool_choice="auto"):
    """
    Obt√©m resposta da API OpenAI com suporte a function calling e tool calling.
    """
    try:
        logger.info(f"Chamando OpenAI API com tool_choice: {tool_choice}")
        logger.info(f"Mensagens: {messages}")
        logger.info(f"Tools: {tools}")
        
        if use_legacy_api:
            openai.api_key = settings.OPENAI_API_KEY
            response = openai.ChatCompletion.create(
                model="gpt-4o-mini-2024-07-18",
                messages=messages,
                tools=tools,
                tool_choice=tool_choice
            )
        else:
            client = openai.OpenAI(api_key=settings.OPENAI_API_KEY)
            response = client.chat.completions.create(
                model="gpt-4o-mini-2024-07-18",
                messages=messages,
                tools=tools,
                tool_choice=tool_choice
            )
        
        # Obtenha a primeira escolha da resposta
        choice = response.choices[0].message
        
        # Verifique e registre o tipo de resposta recebida
        if hasattr(choice, 'tool_calls') and choice.tool_calls:
            logger.info(f"Resposta cont√©m tool_calls: {choice.tool_calls}")
        elif hasattr(choice, 'function_call') and choice.function_call:
            logger.info(f"Resposta cont√©m function_call: {choice.function_call}")
        elif hasattr(choice, 'content') and choice.content:
            logger.info(f"Resposta cont√©m content: {choice.content[:100]}...")
        else:
            logger.warning("Resposta n√£o cont√©m tool_calls, function_call nem content")
            
        return choice
    except Exception as e:
        logger.error(f"Erro ao chamar a API OpenAI: {str(e)}")
        raise

def format_dict_response(data, indent=0):
    """
    Formata um dicion√°rio para exibi√ß√£o como texto.
    """
    if not data:
        return "Sem dados dispon√≠veis."
        
    result = ""
    prefix = "  " * indent
    
    # Para formata√ß√µes espec√≠ficas de dados
    if "notas" in data and isinstance(data["notas"], list):
        result += f"**Notas do Aluno {data.get('aluno', {}).get('nome', '')}**\n\n"
        result += "<table>\n<tr><th>Disciplina</th><th>Nota</th><th>Data</th></tr>\n"
        
        for nota in data["notas"]:
            disciplina = nota.get("disciplina", "N/A")
            valor = nota.get("valor", "N/A")
            data_nota = nota.get("data", "N/A")
            result += f"<tr><td>{disciplina}</td><td>{valor}</td><td>{data_nota}</td></tr>\n"
        
        result += "</table>\n\n"
        
        if "media_geral" in data:
            result += f"**M√©dia Geral:** {data['media_geral']}"
            
        return result
    
    # Para an√°lise de desempenho
    if "media_geral" in data and "situacao_geral" in data and "disciplinas" in data:
        result += f"**An√°lise de Desempenho de {data.get('aluno', {}).get('nome', '')}**\n\n"
        result += f"M√©dia Geral: {data['media_geral']}\n"
        result += f"Situa√ß√£o: {data['situacao_geral']}\n\n"
        
        result += "<table>\n<tr><th>Disciplina</th><th>M√©dia</th><th>Situa√ß√£o</th></tr>\n"
        
        for disc in data["disciplinas"]:
            result += f"<tr><td>{disc['disciplina']}</td><td>{disc['media']}</td><td>{disc['situacao']}</td></tr>\n"
            
        result += "</table>\n"
        return result
    
    # Formato espec√≠fico para respons√°veis quando √© uma pergunta direta
    if "responsaveis" in data and isinstance(data["responsaveis"], list) and len(data["responsaveis"]) > 0:
        nome_aluno = data.get("dados_pessoais", {}).get("nome", data.get("nome", ""))
        if nome_aluno:
            result += f"**Respons√°veis do Aluno {nome_aluno}**\n\n"
            
            for idx, resp in enumerate(data["responsaveis"], 1):
                result += f"**Respons√°vel {idx}**\n"
                for k, v in resp.items():
                    if v:
                        result += f"- {k.replace('_', ' ').title()}: {v}\n"
                result += "\n"
            
            return result
    
    # Formato espec√≠fico para informa√ß√µes do aluno (novo formato visualmente atraente)
    if "dados_pessoais" in data and isinstance(data["dados_pessoais"], dict):
        nome_aluno = data.get("dados_pessoais", {}).get("nome", "")
        
        # Cabe√ßalho com nome do aluno
        result += f"# üìö Ficha do Aluno: {nome_aluno} üìö\n\n"
        
        # Status do aluno (ativo/inativo)
        status = data.get("status", "")
        if status:
            status_emoji = "‚úÖ" if status == "Ativo" else "‚ùå"
            result += f"{status_emoji} **Status:** {status}\n\n"
        
        # Separador
        result += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
        # Dados Pessoais
        result += "## üë§ Dados Pessoais\n\n"
        for k, v in data["dados_pessoais"].items():
            if k != "nome" and k != "foto_url":  # Nome j√° est√° no cabe√ßalho, foto_url ser√° tratada separadamente
                label = k.replace('_', ' ').title()
                if v:
                    if k == "matricula":
                        result += f"üìù **{label}:** {v}\n"
                    elif k == "data_nascimento":
                        result += f"üéÇ **{label}:** {v}\n"
                    elif k == "idade":
                        result += f"üî¢ **{label}:** {v} anos\n"
                    elif k == "cpf":
                        result += f"üìÑ **{label}:** {v}\n"
                    elif k == "rg":
                        result += f"üìÑ **{label}:** {v}\n"
                    else:
                        result += f"‚ÑπÔ∏è **{label}:** {v}\n"
                else:
                    result += f"‚ÑπÔ∏è **{label}:** N√£o Informado\n"
        result += "\n"
        
        # Contato
        result += "## üìû Contato\n\n"
        if "contato" in data and isinstance(data["contato"], dict):
            for k, v in data["contato"].items():
                label = k.replace('_', ' ').title()
                if v:
                    if k == "email":
                        result += f"üìß **{label}:** {v}\n"
                    elif k == "telefone":
                        result += f"üì± **{label}:** {v}\n"
                    else:
                        result += f"‚ÑπÔ∏è **{label}:** {v}\n"
                else:
                    result += f"‚ÑπÔ∏è **{label}:** N√£o Informado\n"
        else:
            result += "‚ÑπÔ∏è **Informa√ß√µes de Contato:** N√£o Informadas\n"
        result += "\n"
        
        # Endere√ßo
        result += "## üè† Endere√ßo\n\n"
        if "endereco" in data and isinstance(data["endereco"], dict):
            for k, v in data["endereco"].items():
                label = k.replace('_', ' ').title()
                if v:
                    result += f"üìç **{label}:** {v}\n"
                else:
                    result += f"üìç **{label}:** N√£o Informado\n"
        else:
            result += "üìç **Endere√ßo:** N√£o Informado\n"
        result += "\n"
        
        # Separador
        result += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
        # Dados Acad√™micos
        result += "## üéì Dados Acad√™micos\n\n"
        if "dados_academicos" in data and isinstance(data["dados_academicos"], dict):
            for k, v in data["dados_academicos"].items():
                label = k.replace('_', ' ').title()
                if v:
                    if k == "nivel":
                        result += f"üìö **{label}:** {v}\n"
                    elif k == "turno":
                        emoji = "üåû" if v == "Manh√£" else "üåô" if v == "Noite" else "üåÜ"
                        result += f"{emoji} **{label}:** {v}\n"
                    elif k == "ano":
                        result += f"üìÖ **{label}:** {v}\n"
                    elif k == "turma":
                        result += f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **{label}:** {v}\n"
                    elif k == "data_matricula":
                        result += f"üìÜ **{label}:** {v}\n"
                    else:
                        result += f"‚ÑπÔ∏è **{label}:** {v}\n"
                else:
                    result += f"‚ÑπÔ∏è **{label}:** N√£o Informado\n"
        else:
            result += "‚ÑπÔ∏è **Dados Acad√™micos:** N√£o Informados\n"
        result += "\n"
        
        # Separador
        result += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
        # Respons√°veis
        result += "## üë™ Respons√°veis\n\n"
        if "responsaveis" in data and isinstance(data["responsaveis"], list) and len(data["responsaveis"]) > 0:
            for idx, resp in enumerate(data["responsaveis"], 1):
                result += f"### Respons√°vel {idx}\n\n"
                if resp.get("nome"):
                    result += f"üë§ **Nome:** {resp['nome']}\n"
                else:
                    result += f"üë§ **Nome:** N√£o Informado\n"
                    
                if resp.get("telefone"):
                    result += f"üì± **Telefone:** {resp['telefone']}\n"
                else:
                    result += f"üì± **Telefone:** N√£o Informado\n"
                result += "\n"
        else:
            result += "‚ÑπÔ∏è **Respons√°veis:** N√£o Informados\n\n"
        
        # Informa√ß√µes Adicionais (se existirem)
        if "informacoes_adicionais" in data and isinstance(data["informacoes_adicionais"], dict) and any(data["informacoes_adicionais"].values()):
            result += "## ‚ÑπÔ∏è Informa√ß√µes Adicionais\n\n"
            for k, v in data["informacoes_adicionais"].items():
                label = k.replace('_', ' ').title()
                if v:
                    result += f"üìã **{label}:** {v}\n"
                else:
                    result += f"üìã **{label}:** N√£o Informado\n"
            result += "\n"
        
        return result
    
    # Formato geral para outros tipos de dicion√°rios
    for key, value in data.items():
        if key in ["error", "message"]:
            result += f"{value}\n"
        elif isinstance(value, dict):
            result += f"{prefix}**{key.replace('_', ' ').title()}**:\n"
            result += format_dict_response(value, indent + 1)
        elif isinstance(value, list) and value and isinstance(value[0], dict):
            result += f"{prefix}**{key.replace('_', ' ').title()}**:\n"
            for item in value:
                result += f"{prefix}  - "
                if "nome" in item:
                    result += f"{item['nome']}"
                    if "id" in item:
                        result += f" (ID: {item['id']})"
                    result += "\n"
                else:
                    result += format_dict_response(item, indent + 2)
        else:
            result += f"{prefix}**{key.replace('_', ' ').title()}**: {value}\n"
    
    return result
